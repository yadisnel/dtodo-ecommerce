// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/account.proto

package account

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v3/api"
	client "github.com/micro/go-micro/v3/client"
	server "github.com/micro/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Account service

func NewAccountEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Account service

type AccountService interface {
	Token(ctx context.Context, in *RequestToken, opts ...client.CallOption) (*ResponseToken, error)
	Info(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ResponseInfo, error)
	UpdateAvatar(ctx context.Context, in *RequestUpdateAvatar, opts ...client.CallOption) (*ResponseUpdateAvatar, error)
	EmqxAuthUser(ctx context.Context, in *RequestEmqxAuthUser, opts ...client.CallOption) (*ResponseEmqxAuthUser, error)
	EmqxAuthAdmin(ctx context.Context, in *RequestEmqxAuthAdmin, opts ...client.CallOption) (*ResponseEmqxAuthAdmin, error)
}

type accountService struct {
	c    client.Client
	name string
}

func NewAccountService(name string, c client.Client) AccountService {
	return &accountService{
		c:    c,
		name: name,
	}
}

func (c *accountService) Token(ctx context.Context, in *RequestToken, opts ...client.CallOption) (*ResponseToken, error) {
	req := c.c.NewRequest(c.name, "Account.Token", in)
	out := new(ResponseToken)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) Info(ctx context.Context, in *RequestInfo, opts ...client.CallOption) (*ResponseInfo, error) {
	req := c.c.NewRequest(c.name, "Account.Info", in)
	out := new(ResponseInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) UpdateAvatar(ctx context.Context, in *RequestUpdateAvatar, opts ...client.CallOption) (*ResponseUpdateAvatar, error) {
	req := c.c.NewRequest(c.name, "Account.UpdateAvatar", in)
	out := new(ResponseUpdateAvatar)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) EmqxAuthUser(ctx context.Context, in *RequestEmqxAuthUser, opts ...client.CallOption) (*ResponseEmqxAuthUser, error) {
	req := c.c.NewRequest(c.name, "Account.EmqxAuthUser", in)
	out := new(ResponseEmqxAuthUser)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountService) EmqxAuthAdmin(ctx context.Context, in *RequestEmqxAuthAdmin, opts ...client.CallOption) (*ResponseEmqxAuthAdmin, error) {
	req := c.c.NewRequest(c.name, "Account.EmqxAuthAdmin", in)
	out := new(ResponseEmqxAuthAdmin)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Account service

type AccountHandler interface {
	Token(context.Context, *RequestToken, *ResponseToken) error
	Info(context.Context, *RequestInfo, *ResponseInfo) error
	UpdateAvatar(context.Context, *RequestUpdateAvatar, *ResponseUpdateAvatar) error
	EmqxAuthUser(context.Context, *RequestEmqxAuthUser, *ResponseEmqxAuthUser) error
	EmqxAuthAdmin(context.Context, *RequestEmqxAuthAdmin, *ResponseEmqxAuthAdmin) error
}

func RegisterAccountHandler(s server.Server, hdlr AccountHandler, opts ...server.HandlerOption) error {
	type account interface {
		Token(ctx context.Context, in *RequestToken, out *ResponseToken) error
		Info(ctx context.Context, in *RequestInfo, out *ResponseInfo) error
		UpdateAvatar(ctx context.Context, in *RequestUpdateAvatar, out *ResponseUpdateAvatar) error
		EmqxAuthUser(ctx context.Context, in *RequestEmqxAuthUser, out *ResponseEmqxAuthUser) error
		EmqxAuthAdmin(ctx context.Context, in *RequestEmqxAuthAdmin, out *ResponseEmqxAuthAdmin) error
	}
	type Account struct {
		account
	}
	h := &accountHandler{hdlr}
	return s.Handle(s.NewHandler(&Account{h}, opts...))
}

type accountHandler struct {
	AccountHandler
}

func (h *accountHandler) Token(ctx context.Context, in *RequestToken, out *ResponseToken) error {
	return h.AccountHandler.Token(ctx, in, out)
}

func (h *accountHandler) Info(ctx context.Context, in *RequestInfo, out *ResponseInfo) error {
	return h.AccountHandler.Info(ctx, in, out)
}

func (h *accountHandler) UpdateAvatar(ctx context.Context, in *RequestUpdateAvatar, out *ResponseUpdateAvatar) error {
	return h.AccountHandler.UpdateAvatar(ctx, in, out)
}

func (h *accountHandler) EmqxAuthUser(ctx context.Context, in *RequestEmqxAuthUser, out *ResponseEmqxAuthUser) error {
	return h.AccountHandler.EmqxAuthUser(ctx, in, out)
}

func (h *accountHandler) EmqxAuthAdmin(ctx context.Context, in *RequestEmqxAuthAdmin, out *ResponseEmqxAuthAdmin) error {
	return h.AccountHandler.EmqxAuthAdmin(ctx, in, out)
}
