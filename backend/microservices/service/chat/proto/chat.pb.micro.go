// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/chat.proto

package chat

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v3/api"
	client "github.com/micro/go-micro/v3/client"
	server "github.com/micro/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Chat service

func NewChatEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Chat service

type ChatService interface {
	WriteMessage(ctx context.Context, in *RequestWriteMessage, opts ...client.CallOption) (*ResponseWriteMessage, error)
	RemoveMessage(ctx context.Context, in *RequestRemoveMessage, opts ...client.CallOption) (*ResponseRemoveMessage, error)
}

type chatService struct {
	c    client.Client
	name string
}

func NewChatService(name string, c client.Client) ChatService {
	return &chatService{
		c:    c,
		name: name,
	}
}

func (c *chatService) WriteMessage(ctx context.Context, in *RequestWriteMessage, opts ...client.CallOption) (*ResponseWriteMessage, error) {
	req := c.c.NewRequest(c.name, "Chat.WriteMessage", in)
	out := new(ResponseWriteMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatService) RemoveMessage(ctx context.Context, in *RequestRemoveMessage, opts ...client.CallOption) (*ResponseRemoveMessage, error) {
	req := c.c.NewRequest(c.name, "Chat.RemoveMessage", in)
	out := new(ResponseRemoveMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Chat service

type ChatHandler interface {
	WriteMessage(context.Context, *RequestWriteMessage, *ResponseWriteMessage) error
	RemoveMessage(context.Context, *RequestRemoveMessage, *ResponseRemoveMessage) error
}

func RegisterChatHandler(s server.Server, hdlr ChatHandler, opts ...server.HandlerOption) error {
	type chat interface {
		WriteMessage(ctx context.Context, in *RequestWriteMessage, out *ResponseWriteMessage) error
		RemoveMessage(ctx context.Context, in *RequestRemoveMessage, out *ResponseRemoveMessage) error
	}
	type Chat struct {
		chat
	}
	h := &chatHandler{hdlr}
	return s.Handle(s.NewHandler(&Chat{h}, opts...))
}

type chatHandler struct {
	ChatHandler
}

func (h *chatHandler) WriteMessage(ctx context.Context, in *RequestWriteMessage, out *ResponseWriteMessage) error {
	return h.ChatHandler.WriteMessage(ctx, in, out)
}

func (h *chatHandler) RemoveMessage(ctx context.Context, in *RequestRemoveMessage, out *ResponseRemoveMessage) error {
	return h.ChatHandler.RemoveMessage(ctx, in, out)
}
