// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/dashboard.proto

package dashboard

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v3/api"
	client "github.com/micro/go-micro/v3/client"
	server "github.com/micro/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Dashboard service

func NewDashboardEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Dashboard service

type DashboardService interface {
	AddCategory(ctx context.Context, in *RequestAddCategory, opts ...client.CallOption) (*ResponseAddCategory, error)
	RemoveCategory(ctx context.Context, in *RequestRemoveCategory, opts ...client.CallOption) (*ResponseRemoveCategory, error)
	AddSubCategory(ctx context.Context, in *RequestAddSubCategory, opts ...client.CallOption) (*ResponseAddSubCategory, error)
	RemoveSubCategory(ctx context.Context, in *RequestRemoveSubCategory, opts ...client.CallOption) (*ResponseRemoveSubCategory, error)
	RetrieveAllCategories(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (Dashboard_RetrieveAllCategoriesService, error)
	AddRegion(ctx context.Context, in *RequestAddRegion, opts ...client.CallOption) (*ResponseAddRegion, error)
	RemoveRegion(ctx context.Context, in *RequestRemoveRegion, opts ...client.CallOption) (*ResponseRemoveRegion, error)
	UpdateRegion(ctx context.Context, in *RequestUpdateRegion, opts ...client.CallOption) (*ResponseUpdateRegion, error)
	RetrieveAllRegions(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (Dashboard_RetrieveAllRegionsService, error)
}

type dashboardService struct {
	c    client.Client
	name string
}

func NewDashboardService(name string, c client.Client) DashboardService {
	return &dashboardService{
		c:    c,
		name: name,
	}
}

func (c *dashboardService) AddCategory(ctx context.Context, in *RequestAddCategory, opts ...client.CallOption) (*ResponseAddCategory, error) {
	req := c.c.NewRequest(c.name, "Dashboard.AddCategory", in)
	out := new(ResponseAddCategory)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardService) RemoveCategory(ctx context.Context, in *RequestRemoveCategory, opts ...client.CallOption) (*ResponseRemoveCategory, error) {
	req := c.c.NewRequest(c.name, "Dashboard.RemoveCategory", in)
	out := new(ResponseRemoveCategory)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardService) AddSubCategory(ctx context.Context, in *RequestAddSubCategory, opts ...client.CallOption) (*ResponseAddSubCategory, error) {
	req := c.c.NewRequest(c.name, "Dashboard.AddSubCategory", in)
	out := new(ResponseAddSubCategory)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardService) RemoveSubCategory(ctx context.Context, in *RequestRemoveSubCategory, opts ...client.CallOption) (*ResponseRemoveSubCategory, error) {
	req := c.c.NewRequest(c.name, "Dashboard.RemoveSubCategory", in)
	out := new(ResponseRemoveSubCategory)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardService) RetrieveAllCategories(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (Dashboard_RetrieveAllCategoriesService, error) {
	req := c.c.NewRequest(c.name, "Dashboard.RetrieveAllCategories", &empty.Empty{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &dashboardServiceRetrieveAllCategories{stream}, nil
}

type Dashboard_RetrieveAllCategoriesService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ResponseRetrieveAllCategories, error)
}

type dashboardServiceRetrieveAllCategories struct {
	stream client.Stream
}

func (x *dashboardServiceRetrieveAllCategories) Close() error {
	return x.stream.Close()
}

func (x *dashboardServiceRetrieveAllCategories) Context() context.Context {
	return x.stream.Context()
}

func (x *dashboardServiceRetrieveAllCategories) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *dashboardServiceRetrieveAllCategories) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *dashboardServiceRetrieveAllCategories) Recv() (*ResponseRetrieveAllCategories, error) {
	m := new(ResponseRetrieveAllCategories)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dashboardService) AddRegion(ctx context.Context, in *RequestAddRegion, opts ...client.CallOption) (*ResponseAddRegion, error) {
	req := c.c.NewRequest(c.name, "Dashboard.AddRegion", in)
	out := new(ResponseAddRegion)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardService) RemoveRegion(ctx context.Context, in *RequestRemoveRegion, opts ...client.CallOption) (*ResponseRemoveRegion, error) {
	req := c.c.NewRequest(c.name, "Dashboard.RemoveRegion", in)
	out := new(ResponseRemoveRegion)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardService) UpdateRegion(ctx context.Context, in *RequestUpdateRegion, opts ...client.CallOption) (*ResponseUpdateRegion, error) {
	req := c.c.NewRequest(c.name, "Dashboard.UpdateRegion", in)
	out := new(ResponseUpdateRegion)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardService) RetrieveAllRegions(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (Dashboard_RetrieveAllRegionsService, error) {
	req := c.c.NewRequest(c.name, "Dashboard.RetrieveAllRegions", &empty.Empty{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &dashboardServiceRetrieveAllRegions{stream}, nil
}

type Dashboard_RetrieveAllRegionsService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ResponseRetrieveAllRegions, error)
}

type dashboardServiceRetrieveAllRegions struct {
	stream client.Stream
}

func (x *dashboardServiceRetrieveAllRegions) Close() error {
	return x.stream.Close()
}

func (x *dashboardServiceRetrieveAllRegions) Context() context.Context {
	return x.stream.Context()
}

func (x *dashboardServiceRetrieveAllRegions) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *dashboardServiceRetrieveAllRegions) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *dashboardServiceRetrieveAllRegions) Recv() (*ResponseRetrieveAllRegions, error) {
	m := new(ResponseRetrieveAllRegions)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Dashboard service

type DashboardHandler interface {
	AddCategory(context.Context, *RequestAddCategory, *ResponseAddCategory) error
	RemoveCategory(context.Context, *RequestRemoveCategory, *ResponseRemoveCategory) error
	AddSubCategory(context.Context, *RequestAddSubCategory, *ResponseAddSubCategory) error
	RemoveSubCategory(context.Context, *RequestRemoveSubCategory, *ResponseRemoveSubCategory) error
	RetrieveAllCategories(context.Context, *empty.Empty, Dashboard_RetrieveAllCategoriesStream) error
	AddRegion(context.Context, *RequestAddRegion, *ResponseAddRegion) error
	RemoveRegion(context.Context, *RequestRemoveRegion, *ResponseRemoveRegion) error
	UpdateRegion(context.Context, *RequestUpdateRegion, *ResponseUpdateRegion) error
	RetrieveAllRegions(context.Context, *empty.Empty, Dashboard_RetrieveAllRegionsStream) error
}

func RegisterDashboardHandler(s server.Server, hdlr DashboardHandler, opts ...server.HandlerOption) error {
	type dashboard interface {
		AddCategory(ctx context.Context, in *RequestAddCategory, out *ResponseAddCategory) error
		RemoveCategory(ctx context.Context, in *RequestRemoveCategory, out *ResponseRemoveCategory) error
		AddSubCategory(ctx context.Context, in *RequestAddSubCategory, out *ResponseAddSubCategory) error
		RemoveSubCategory(ctx context.Context, in *RequestRemoveSubCategory, out *ResponseRemoveSubCategory) error
		RetrieveAllCategories(ctx context.Context, stream server.Stream) error
		AddRegion(ctx context.Context, in *RequestAddRegion, out *ResponseAddRegion) error
		RemoveRegion(ctx context.Context, in *RequestRemoveRegion, out *ResponseRemoveRegion) error
		UpdateRegion(ctx context.Context, in *RequestUpdateRegion, out *ResponseUpdateRegion) error
		RetrieveAllRegions(ctx context.Context, stream server.Stream) error
	}
	type Dashboard struct {
		dashboard
	}
	h := &dashboardHandler{hdlr}
	return s.Handle(s.NewHandler(&Dashboard{h}, opts...))
}

type dashboardHandler struct {
	DashboardHandler
}

func (h *dashboardHandler) AddCategory(ctx context.Context, in *RequestAddCategory, out *ResponseAddCategory) error {
	return h.DashboardHandler.AddCategory(ctx, in, out)
}

func (h *dashboardHandler) RemoveCategory(ctx context.Context, in *RequestRemoveCategory, out *ResponseRemoveCategory) error {
	return h.DashboardHandler.RemoveCategory(ctx, in, out)
}

func (h *dashboardHandler) AddSubCategory(ctx context.Context, in *RequestAddSubCategory, out *ResponseAddSubCategory) error {
	return h.DashboardHandler.AddSubCategory(ctx, in, out)
}

func (h *dashboardHandler) RemoveSubCategory(ctx context.Context, in *RequestRemoveSubCategory, out *ResponseRemoveSubCategory) error {
	return h.DashboardHandler.RemoveSubCategory(ctx, in, out)
}

func (h *dashboardHandler) RetrieveAllCategories(ctx context.Context, stream server.Stream) error {
	m := new(empty.Empty)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.DashboardHandler.RetrieveAllCategories(ctx, m, &dashboardRetrieveAllCategoriesStream{stream})
}

type Dashboard_RetrieveAllCategoriesStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ResponseRetrieveAllCategories) error
}

type dashboardRetrieveAllCategoriesStream struct {
	stream server.Stream
}

func (x *dashboardRetrieveAllCategoriesStream) Close() error {
	return x.stream.Close()
}

func (x *dashboardRetrieveAllCategoriesStream) Context() context.Context {
	return x.stream.Context()
}

func (x *dashboardRetrieveAllCategoriesStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *dashboardRetrieveAllCategoriesStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *dashboardRetrieveAllCategoriesStream) Send(m *ResponseRetrieveAllCategories) error {
	return x.stream.Send(m)
}

func (h *dashboardHandler) AddRegion(ctx context.Context, in *RequestAddRegion, out *ResponseAddRegion) error {
	return h.DashboardHandler.AddRegion(ctx, in, out)
}

func (h *dashboardHandler) RemoveRegion(ctx context.Context, in *RequestRemoveRegion, out *ResponseRemoveRegion) error {
	return h.DashboardHandler.RemoveRegion(ctx, in, out)
}

func (h *dashboardHandler) UpdateRegion(ctx context.Context, in *RequestUpdateRegion, out *ResponseUpdateRegion) error {
	return h.DashboardHandler.UpdateRegion(ctx, in, out)
}

func (h *dashboardHandler) RetrieveAllRegions(ctx context.Context, stream server.Stream) error {
	m := new(empty.Empty)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.DashboardHandler.RetrieveAllRegions(ctx, m, &dashboardRetrieveAllRegionsStream{stream})
}

type Dashboard_RetrieveAllRegionsStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ResponseRetrieveAllRegions) error
}

type dashboardRetrieveAllRegionsStream struct {
	stream server.Stream
}

func (x *dashboardRetrieveAllRegionsStream) Close() error {
	return x.stream.Close()
}

func (x *dashboardRetrieveAllRegionsStream) Context() context.Context {
	return x.stream.Context()
}

func (x *dashboardRetrieveAllRegionsStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *dashboardRetrieveAllRegionsStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *dashboardRetrieveAllRegionsStream) Send(m *ResponseRetrieveAllRegions) error {
	return x.stream.Send(m)
}
